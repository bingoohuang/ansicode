// Code generated by "enumer -type=Attribute"; DO NOT EDIT.

//
package ansicode

import (
	"fmt"
)

const (
	_AttributeName_0 = "ResetBoldFaintItalicUnderlineBlinkSlowBlinkRapidReverseVideoConcealedCrossedOut"
	_AttributeName_1 = "FgBlackFgRedFgGreenFgYellowFgBlueFgMagentaFgCyanFgWhite"
	_AttributeName_2 = "BgBlackBgRedBgGreenBgYellowBgBlueBgMagentaBgCyanBgWhite"
	_AttributeName_3 = "FgHiBlackFgHiRedFgHiGreenFgHiYellowFgHiBlueFgHiMagentaFgHiCyanFgHiWhite"
	_AttributeName_4 = "BgHiBlackBgHiRedBgHiGreenBgHiYellowBgHiBlueBgHiMagentaBgHiCyanBgHiWhite"
)

var (
	_AttributeIndex_0 = [...]uint8{0, 5, 9, 14, 20, 29, 38, 48, 60, 69, 79}
	_AttributeIndex_1 = [...]uint8{0, 7, 12, 19, 27, 33, 42, 48, 55}
	_AttributeIndex_2 = [...]uint8{0, 7, 12, 19, 27, 33, 42, 48, 55}
	_AttributeIndex_3 = [...]uint8{0, 9, 16, 25, 35, 43, 54, 62, 71}
	_AttributeIndex_4 = [...]uint8{0, 9, 16, 25, 35, 43, 54, 62, 71}
)

func (i Attribute) String() string {
	switch {
	case 0 <= i && i <= 9:
		return _AttributeName_0[_AttributeIndex_0[i]:_AttributeIndex_0[i+1]]
	case 30 <= i && i <= 37:
		i -= 30
		return _AttributeName_1[_AttributeIndex_1[i]:_AttributeIndex_1[i+1]]
	case 40 <= i && i <= 47:
		i -= 40
		return _AttributeName_2[_AttributeIndex_2[i]:_AttributeIndex_2[i+1]]
	case 90 <= i && i <= 97:
		i -= 90
		return _AttributeName_3[_AttributeIndex_3[i]:_AttributeIndex_3[i+1]]
	case 100 <= i && i <= 107:
		i -= 100
		return _AttributeName_4[_AttributeIndex_4[i]:_AttributeIndex_4[i+1]]
	default:
		return fmt.Sprintf("Attribute(%d)", i)
	}
}

var _AttributeValues = []Attribute{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107}

var _AttributeNameToValueMap = map[string]Attribute{
	_AttributeName_0[0:5]:   0,
	_AttributeName_0[5:9]:   1,
	_AttributeName_0[9:14]:  2,
	_AttributeName_0[14:20]: 3,
	_AttributeName_0[20:29]: 4,
	_AttributeName_0[29:38]: 5,
	_AttributeName_0[38:48]: 6,
	_AttributeName_0[48:60]: 7,
	_AttributeName_0[60:69]: 8,
	_AttributeName_0[69:79]: 9,
	_AttributeName_1[0:7]:   30,
	_AttributeName_1[7:12]:  31,
	_AttributeName_1[12:19]: 32,
	_AttributeName_1[19:27]: 33,
	_AttributeName_1[27:33]: 34,
	_AttributeName_1[33:42]: 35,
	_AttributeName_1[42:48]: 36,
	_AttributeName_1[48:55]: 37,
	_AttributeName_2[0:7]:   40,
	_AttributeName_2[7:12]:  41,
	_AttributeName_2[12:19]: 42,
	_AttributeName_2[19:27]: 43,
	_AttributeName_2[27:33]: 44,
	_AttributeName_2[33:42]: 45,
	_AttributeName_2[42:48]: 46,
	_AttributeName_2[48:55]: 47,
	_AttributeName_3[0:9]:   90,
	_AttributeName_3[9:16]:  91,
	_AttributeName_3[16:25]: 92,
	_AttributeName_3[25:35]: 93,
	_AttributeName_3[35:43]: 94,
	_AttributeName_3[43:54]: 95,
	_AttributeName_3[54:62]: 96,
	_AttributeName_3[62:71]: 97,
	_AttributeName_4[0:9]:   100,
	_AttributeName_4[9:16]:  101,
	_AttributeName_4[16:25]: 102,
	_AttributeName_4[25:35]: 103,
	_AttributeName_4[35:43]: 104,
	_AttributeName_4[43:54]: 105,
	_AttributeName_4[54:62]: 106,
	_AttributeName_4[62:71]: 107,
}

// AttributeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AttributeString(s string) (Attribute, error) {
	if val, ok := _AttributeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Attribute values", s)
}

// AttributeValues returns all values of the enum
func AttributeValues() []Attribute {
	return _AttributeValues
}

// IsAAttribute returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Attribute) IsAAttribute() bool {
	for _, v := range _AttributeValues {
		if i == v {
			return true
		}
	}
	return false
}
